package br.com.iterative.green.controllers;

import java.net.URI;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import br.com.iterative.green.controllers.dto.CorridasDTO;
import br.com.iterative.green.controllers.dto.VeiculosDTO;
import br.com.iterative.green.controllers.form.CorridaAtualizarForm;
import br.com.iterative.green.controllers.form.CorridasForm;
import br.com.iterative.green.controllers.form.VeiculoAtualizarForm;
import br.com.iterative.green.models.Corridas;
import br.com.iterative.green.models.Veiculos;
import br.com.iterative.green.repository.CorridasRepository;
import br.com.iterative.green.repository.VeiculosRepository;

@RestController
public class GreenController {
	@Autowired VeiculosRepository veiculosRepository;
	
	@Autowired CorridasRepository corridasRepository;
	
	@CrossOrigin
	@RequestMapping(value = "/veiculos", method = RequestMethod.GET)
	public List<VeiculosDTO> listarVeiculos(){
		List<Veiculos> veiculos = veiculosRepository.findAll();
		
		return VeiculosDTO.converter(veiculos);
	}
	
	@CrossOrigin
	@RequestMapping(value = "/corridas", method = RequestMethod.GET)
	public List<CorridasDTO> listarCorridas(){
		List<Corridas> corridas = corridasRepository.findAll();
		
		return CorridasDTO.converter(corridas);
	}
	
	@CrossOrigin
	@RequestMapping(value = "/alugar/{id}", method = RequestMethod.GET)
	public VeiculosDTO alugarVeiculo(@PathVariable Long id) {
		Veiculos veiculo = veiculosRepository.getOne(id);
		
		return new VeiculosDTO(veiculo);
	}
	
	@CrossOrigin
	@RequestMapping(value ="/alugar", method = RequestMethod.POST)
	public ResponseEntity<VeiculosDTO> cadastrar(@RequestBody CorridasForm form, UriComponentsBuilder uribuBuilder){
		Corridas corrida = form.converter(veiculosRepository);
		corridasRepository.save(corrida);

		URI uri = uribuBuilder.path("/corridas/{id}").buildAndExpand(corrida.getId()).toUri();
		return ResponseEntity.created(uri).body(new VeiculosDTO(corrida.getVeiculo()));
	}
	
	@CrossOrigin
	@RequestMapping(value = "/corridas/{idCorrida}", method = RequestMethod.PUT)
	@Transactional
	public ResponseEntity<CorridasDTO> finalizar(@PathVariable Long idCorrida, @RequestBody CorridaAtualizarForm corridaForm){
		Corridas corridaAtualizada = corridaForm.atualizar(idCorrida,corridasRepository);

		return ResponseEntity.ok(new CorridasDTO(corridaAtualizada));
	}
	@CrossOrigin
	@RequestMapping(value = "/veiculos/{id}", method = RequestMethod.PUT)
	@Transactional
	public ResponseEntity<VeiculosDTO> finalizar(@PathVariable Long id, @RequestBody VeiculoAtualizarForm veiculoForm){
		Veiculos veiculoAtualizado = veiculoForm.atualizar(id, veiculosRepository);
		
		
		return ResponseEntity.ok(new VeiculosDTO(veiculoAtualizado));
	}
	
}





